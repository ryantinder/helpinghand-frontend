// Generated by @wagmi/cli@0.1.5 on 2/18/2023 at 11:48:43 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'value', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'spender', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'amount', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'addedValue', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'subtractedValue', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'spender', type: 'address', indexed: true },
      { name: 'tokenId', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    inputs: [
      { name: 'owner', type: 'address', indexed: true },
      { name: 'operator', type: 'address', indexed: true },
      { name: 'approved', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    inputs: [
      { name: 'from', type: 'address', indexed: true },
      { name: 'to', type: 'address', indexed: true },
      { name: 'tokenId', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'spender', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'operator', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', type: 'address' },
      { name: 'to', type: 'address' },
      { name: 'id', type: 'uint256' },
      { name: 'data', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', type: 'address' },
      { name: 'approved', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', type: 'address' },
      { name: 'index', type: 'uint256' },
    ],
    name: 'tokenByIndex',
    outputs: [{ name: 'tokenId', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sender', type: 'address' },
      { name: 'recipient', type: 'address' },
      { name: 'tokenId', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProjectFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export const projectFactoryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'project',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'host', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ProjectCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ipfs', internalType: 'string', type: 'string' },
      { name: 'asset', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'createProject',
    outputs: [{ name: 'project', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'identityProvider',
    outputs: [
      { name: '', internalType: 'contract IdentityProvider', type: 'address' },
    ],
  },
] as const

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export const projectFactoryAddress = {
  42161: '0xF8af87B21e049659495D57416A8B34c55c6e4CCe',
} as const

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export const projectFactoryConfig = {
  address: projectFactoryAddress,
  abi: projectFactoryABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IdentityProvider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export const identityProviderABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'project', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: '_photos', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'addPhotos',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'project', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPhotos',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'project', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'photos',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'project', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'removePhotos',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export const identityProviderAddress = {
  42161: '0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0',
} as const

/**
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export const identityProviderConfig = {
  address: identityProviderAddress,
  abi: identityProviderABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Project
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const projectABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_ipfs', internalType: 'string', type: 'string' },
      { name: '_host', internalType: 'address', type: 'address' },
      { name: '_asset', internalType: 'contract IERC20', type: 'address' },
      {
        name: '_identityProvider',
        internalType: 'contract IdentityProvider',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'asset',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'endProject',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'enter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'exit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getContributors',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'host',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'identityProvider',
    outputs: [
      { name: '', internalType: 'contract IdentityProvider', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'ipfs',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc721ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'getApproved'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'ownerOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useErc721TokenByIndex(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenByIndex'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenByIndex',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenByIndex'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'tokenURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc721ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, TFunctionName>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'approve'>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'safeTransferFrom'>['abi'],
        'safeTransferFrom'
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'safeTransferFrom'> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'safeTransferFrom'>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'setApprovalForAll'> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'setApprovalForAll'>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc721ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc721ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc721ABI, 'transferFrom'>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link projectFactoryABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function useProjectFactory(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof projectFactoryAddress
  } = {} as any,
) {
  return useContract({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectFactoryABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function useProjectFactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof projectFactoryABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof projectFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    ...config,
  } as UseContractReadConfig<typeof projectFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectFactoryABI}__ and `functionName` set to `"identityProvider"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function useProjectFactoryIdentityProvider(
  config: Omit<
    UseContractReadConfig<typeof projectFactoryABI, 'identityProvider'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof projectFactoryAddress } = {} as any,
) {
  return useContractRead({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    functionName: 'identityProvider',
    ...config,
  } as UseContractReadConfig<typeof projectFactoryABI, 'identityProvider'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectFactoryABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function useProjectFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof projectFactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectFactoryABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<TMode, typeof projectFactoryABI, TFunctionName> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof projectFactoryABI, TFunctionName>({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectFactoryABI}__ and `functionName` set to `"createProject"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function useProjectFactoryCreateProject<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof projectFactoryAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof projectFactoryABI,
          'createProject'
        >['abi'],
        'createProject'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'createProject'
      }
    : UseContractWriteConfig<
        TMode,
        typeof projectFactoryABI,
        'createProject'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createProject'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof projectFactoryABI, 'createProject'>({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    functionName: 'createProject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectFactoryABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function usePrepareProjectFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectFactoryABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof projectFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectFactoryABI}__ and `functionName` set to `"createProject"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function usePrepareProjectFactoryCreateProject(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectFactoryABI, 'createProject'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof projectFactoryAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    functionName: 'createProject',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectFactoryABI, 'createProject'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectFactoryABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function useProjectFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof projectFactoryABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof projectFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    ...config,
  } as UseContractEventConfig<typeof projectFactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link projectFactoryABI}__ and `eventName` set to `"ProjectCreated"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xf8af87b21e049659495d57416a8b34c55c6e4cce)
 */
export function useProjectFactoryProjectCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof projectFactoryABI, 'ProjectCreated'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof projectFactoryAddress } = {} as any,
) {
  return useContractEvent({
    abi: projectFactoryABI,
    address: projectFactoryAddress[42161],
    eventName: 'ProjectCreated',
    ...config,
  } as UseContractEventConfig<typeof projectFactoryABI, 'ProjectCreated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link identityProviderABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProvider(
  config: Omit<UseContractConfig, 'abi' | 'address'> & {
    chainId?: keyof typeof identityProviderAddress
  } = {} as any,
) {
  return useContract({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    ...config,
  })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"balanceOf"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'balanceOf'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"getApproved"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderGetApproved(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'getApproved'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'getApproved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"getPhotos"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderGetPhotos(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'getPhotos'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'getPhotos',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'getPhotos'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderIsApprovedForAll(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'isApprovedForAll'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'isApprovedForAll'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"name"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderName(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'name'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"ownerOf"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderOwnerOf(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'ownerOf'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'ownerOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"photos"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderPhotos(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'photos'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'photos',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'photos'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderSupportsInterface(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'supportsInterface'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'supportsInterface'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"symbol"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderSymbol(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'symbol'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"tokenURI"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderTokenUri(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'tokenURI'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'tokenURI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"totalSupply"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'totalSupply'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"transferFrom"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderTransferFrom(
  config: Omit<
    UseContractReadConfig<typeof identityProviderABI, 'transferFrom'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractRead({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'transferFrom',
    ...config,
  } as UseContractReadConfig<typeof identityProviderABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identityProviderABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
  TChainId extends number = keyof typeof identityProviderAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof identityProviderABI, string>['abi'],
        TFunctionName
      > & { address?: `0x${string}`; chainId?: TChainId }
    : UseContractWriteConfig<
        TMode,
        typeof identityProviderABI,
        TFunctionName
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any,
) {
  return useContractWrite<TMode, typeof identityProviderABI, TFunctionName>({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"addPhotos"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderAddPhotos<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof identityProviderAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof identityProviderABI,
          'addPhotos'
        >['abi'],
        'addPhotos'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'addPhotos'
      }
    : UseContractWriteConfig<TMode, typeof identityProviderABI, 'addPhotos'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'addPhotos'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof identityProviderABI, 'addPhotos'>({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'addPhotos',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderApprove<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof identityProviderAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof identityProviderABI,
          'approve'
        >['abi'],
        'approve'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'approve'
      }
    : UseContractWriteConfig<TMode, typeof identityProviderABI, 'approve'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof identityProviderABI, 'approve'>({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderMint<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof identityProviderAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof identityProviderABI, 'mint'>['abi'],
        'mint'
      > & { address?: `0x${string}`; chainId?: TChainId; functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof identityProviderABI, 'mint'> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof identityProviderABI, 'mint'>({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"removePhotos"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderRemovePhotos<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof identityProviderAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof identityProviderABI,
          'removePhotos'
        >['abi'],
        'removePhotos'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'removePhotos'
      }
    : UseContractWriteConfig<
        TMode,
        typeof identityProviderABI,
        'removePhotos'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'removePhotos'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof identityProviderABI, 'removePhotos'>({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'removePhotos',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderSafeTransferFrom<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof identityProviderAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof identityProviderABI,
          'safeTransferFrom'
        >['abi'],
        'safeTransferFrom'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<
        TMode,
        typeof identityProviderABI,
        'safeTransferFrom'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof identityProviderABI,
    'safeTransferFrom'
  >({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderSetApprovalForAll<
  TMode extends WriteContractMode,
  TChainId extends number = keyof typeof identityProviderAddress,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof identityProviderABI,
          'setApprovalForAll'
        >['abi'],
        'setApprovalForAll'
      > & {
        address?: `0x${string}`
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<
        TMode,
        typeof identityProviderABI,
        'setApprovalForAll'
      > & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof identityProviderABI,
    'setApprovalForAll'
  >({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identityProviderABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function usePrepareIdentityProviderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof identityProviderABI, TFunctionName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    ...config,
  } as UsePrepareContractWriteConfig<typeof identityProviderABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"addPhotos"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function usePrepareIdentityProviderAddPhotos(
  config: Omit<
    UsePrepareContractWriteConfig<typeof identityProviderABI, 'addPhotos'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'addPhotos',
    ...config,
  } as UsePrepareContractWriteConfig<typeof identityProviderABI, 'addPhotos'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"approve"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function usePrepareIdentityProviderApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof identityProviderABI, 'approve'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof identityProviderABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"mint"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function usePrepareIdentityProviderMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof identityProviderABI, 'mint'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof identityProviderABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"removePhotos"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function usePrepareIdentityProviderRemovePhotos(
  config: Omit<
    UsePrepareContractWriteConfig<typeof identityProviderABI, 'removePhotos'>,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'removePhotos',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof identityProviderABI,
    'removePhotos'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function usePrepareIdentityProviderSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof identityProviderABI,
      'safeTransferFrom'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof identityProviderABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link identityProviderABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function usePrepareIdentityProviderSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof identityProviderABI,
      'setApprovalForAll'
    >,
    'abi' | 'address' | 'functionName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return usePrepareContractWrite({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof identityProviderABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link identityProviderABI}__.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof identityProviderABI, TEventName>,
    'abi' | 'address'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractEvent({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    ...config,
  } as UseContractEventConfig<typeof identityProviderABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link identityProviderABI}__ and `eventName` set to `"Approval"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof identityProviderABI, 'Approval'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractEvent({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof identityProviderABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link identityProviderABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof identityProviderABI, 'ApprovalForAll'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractEvent({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof identityProviderABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link identityProviderABI}__ and `eventName` set to `"Transfer"`.
 *
 * [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1ed0A95A237b63D55128Dd53D3877B50cB97B9a0)
 */
export function useIdentityProviderTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof identityProviderABI, 'Transfer'>,
    'abi' | 'address' | 'eventName'
  > & { chainId?: keyof typeof identityProviderAddress } = {} as any,
) {
  return useContractEvent({
    abi: identityProviderABI,
    address: identityProviderAddress[42161],
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof identityProviderABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link projectABI}__.
 */
export function useProject(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: projectABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectABI}__.
 */
export function useProjectRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof projectABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: projectABI,
    ...config,
  } as UseContractReadConfig<typeof projectABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"asset"`.
 */
export function useProjectAsset(
  config: Omit<
    UseContractReadConfig<typeof projectABI, 'asset'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: projectABI,
    functionName: 'asset',
    ...config,
  } as UseContractReadConfig<typeof projectABI, 'asset'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"getContributors"`.
 */
export function useProjectGetContributors(
  config: Omit<
    UseContractReadConfig<typeof projectABI, 'getContributors'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: projectABI,
    functionName: 'getContributors',
    ...config,
  } as UseContractReadConfig<typeof projectABI, 'getContributors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"host"`.
 */
export function useProjectHost(
  config: Omit<
    UseContractReadConfig<typeof projectABI, 'host'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: projectABI,
    functionName: 'host',
    ...config,
  } as UseContractReadConfig<typeof projectABI, 'host'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"identityProvider"`.
 */
export function useProjectIdentityProvider(
  config: Omit<
    UseContractReadConfig<typeof projectABI, 'identityProvider'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: projectABI,
    functionName: 'identityProvider',
    ...config,
  } as UseContractReadConfig<typeof projectABI, 'identityProvider'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"ipfs"`.
 */
export function useProjectIpfs(
  config: Omit<
    UseContractReadConfig<typeof projectABI, 'ipfs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: projectABI,
    functionName: 'ipfs',
    ...config,
  } as UseContractReadConfig<typeof projectABI, 'ipfs'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectABI}__.
 */
export function useProjectWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof projectABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof projectABI, TFunctionName>({
    abi: projectABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"endProject"`.
 */
export function useProjectEndProject<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectABI, 'endProject'>['abi'],
        'endProject'
      > & { functionName?: 'endProject' }
    : UseContractWriteConfig<TMode, typeof projectABI, 'endProject'> & {
        abi?: never
        functionName?: 'endProject'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof projectABI, 'endProject'>({
    abi: projectABI,
    functionName: 'endProject',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"enter"`.
 */
export function useProjectEnter<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectABI, 'enter'>['abi'],
        'enter'
      > & { functionName?: 'enter' }
    : UseContractWriteConfig<TMode, typeof projectABI, 'enter'> & {
        abi?: never
        functionName?: 'enter'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof projectABI, 'enter'>({
    abi: projectABI,
    functionName: 'enter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"exit"`.
 */
export function useProjectExit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof projectABI, 'exit'>['abi'],
        'exit'
      > & { functionName?: 'exit' }
    : UseContractWriteConfig<TMode, typeof projectABI, 'exit'> & {
        abi?: never
        functionName?: 'exit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof projectABI, 'exit'>({
    abi: projectABI,
    functionName: 'exit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectABI}__.
 */
export function usePrepareProjectWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"endProject"`.
 */
export function usePrepareProjectEndProject(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectABI, 'endProject'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectABI,
    functionName: 'endProject',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectABI, 'endProject'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"enter"`.
 */
export function usePrepareProjectEnter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectABI, 'enter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectABI,
    functionName: 'enter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectABI, 'enter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link projectABI}__ and `functionName` set to `"exit"`.
 */
export function usePrepareProjectExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof projectABI, 'exit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: projectABI,
    functionName: 'exit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof projectABI, 'exit'>)
}
